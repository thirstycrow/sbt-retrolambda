package sbtretrolambda

import java.io._
import java.nio.file.{Path, Paths}
import java.util.{List => JList}
import net.orfjackal.retrolambda.{Config, Main, Retrolambda}
import sbt.Keys._
import sbt._
import sbt.plugins.JvmPlugin
import scala.beans.{BeanProperty, BooleanBeanProperty}
import scala.collection.JavaConverters._

object SbtRetrolambda extends AutoPlugin {

  object autoImport {

    val RetrolambdaConfig = config("retrolambda").hide

    val retrolambdaBytecodeVersion = settingKey[Int]("Major version number for the generated bytecode.")

    val retrolambdaDefaultMethods = settingKey[Boolean]("Whether to backport default methods and static methods on interfaces.")

    val retrolambdaInputDir = taskKey[File]("Input directory from where the original class files are read.")

    val retrolambdaOutputDir = taskKey[Option[File]]("Output directory into where the generated class files are written.")

    val retrolambdaClasspath = taskKey[Classpath]("Classpath containing the original class files and their dependencies.")

    val retrolambdaIncludedFiles = taskKey[Option[Seq[File]]]("List of files to process, instead of processing all files.")

    val retrolambdaQuiet = settingKey[Boolean]("Reduces the amount of logging.")

    val retrolambda = taskKey[Unit]("Retrolambda takes Java 8 classes and backports lambda expressions and some other language features to work on Java 7, 6 or 5.")
  }

  override def requires = JvmPlugin

  import autoImport._

  override def projectConfigurations: Seq[Configuration] = Seq(RetrolambdaConfig)

  override def projectSettings: Seq[Def.Setting[_]] = inConfig(RetrolambdaConfig)(defaultRetrolambdaSettings)

  def printToTempFile(lines: Seq[String]): File = {
    val file = File.createTempFile("sbt-retrolambda", "classpath")
    val fileWriter = new PrintWriter(file, "UTF-8")
    try {
      lines.foreach(fileWriter.println)
      file
    } finally {
      fileWriter.close()
    }
  }

  class RetrolambdaConfig(@BeanProperty        val bytecodeVersion: Int,
                          @BooleanBeanProperty val defaultMethodsEnabled: Boolean,
                          @BeanProperty        val inputDir: Path,
                          @BeanProperty        val outputDir: Path,
                          @BeanProperty        val classpath: JList[Path],
                          @BeanProperty        val includedFiles: JList[Path],
                          @BooleanBeanProperty val quiet: Boolean)
    extends net.orfjackal.retrolambda.Config

  def defaultRetrolambdaSettings = Seq(
    retrolambdaBytecodeVersion := 51,
    retrolambdaDefaultMethods := true,
    retrolambdaInputDir := (classDirectory in Compile).value,
    retrolambdaOutputDir := None,
    retrolambdaClasspath := (fullClasspath in Compile).value,
    retrolambdaIncludedFiles := None,
    retrolambdaQuiet := false,

    retrolambda := (runRetrolambda dependsOn (compile in Compile)).value
  )

  def runRetrolambda = Def.task {
    val config: Config = new RetrolambdaConfig(
      retrolambdaBytecodeVersion.value,
      retrolambdaDefaultMethods.value,
      Paths.get(retrolambdaInputDir.value.toURI),
      Paths.get(retrolambdaOutputDir.value.getOrElse(retrolambdaInputDir.value).toURI),
      (fullClasspath in Compile).value.map(entry => Paths.get(entry.data.toURI)).asJava,
      retrolambdaIncludedFiles.value.map(_.map(file => Paths.get(file.toURI)).asJava).getOrElse(null),
      retrolambdaQuiet.value
    )

    if (!Main.isRunningJava8) {
      throw new IllegalStateException("Not running under Java 8")
    }

    Retrolambda.run(config)
  }
}
